#Область ДополнительныеОбработки

Функция СведенияОВнешнейОбработке() Экспорт
	
	МассивНазначений = Новый Массив;
	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");
	ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
	ПараметрыРегистрации.Вставить("Наименование", "Проверка веб сервис 1С Remote Control");
	ПараметрыРегистрации.Вставить("Версия", "2019.06.22");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация", ИнформацияПоИсторииИзменений());
	ПараметрыРегистрации.Вставить("ВерсияБСП", "1.2.1.4");
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	ДобавитьКоманду(ТаблицаКоманд,
	                "Проверка веб сервис 1С Remote Control",
					"ПроверкаВебСервисRemoteControl",
					"ОткрытиеФормы",
					Истина,
					);
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()
	
	Команды = Новый ТаблицаЗначений;
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	
	Возврат Команды;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
	
КонецПроцедуры

Функция ИнформацияПоИсторииИзменений()
	Возврат "
	| <div style='text-indent: 25px;'>Данная обработка позволяет првоерять доступность базы 1С опублекованной в веб через сервис 1С Remote Control.</div>
	| <hr />
	| Подробную информацию смотрите по адресу интернет: <a target='_blank' href='https://github.com/Polyplastic/1c-parsing-tech-log'>https://github.com/Polyplastic/1c-parsing-tech-log</a>";
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаДаных

Процедура ВыполнитьЗагрузкуДанных(Замер,ДополнительнаяОбработка=Неопределено) Экспорт
	
	ВыполнитьЗамер(Замер);	
	
КонецПроцедуры

Функция ВыполнитьЗамер(Замер) Экспорт

	// получим настройки загрузки
	мНастройка = УправлениеХранилищемНастроекВызовСервера.ДанныеИзБезопасногоХранилища(Замер);
	
	Если мНастройка=Неопределено Тогда
		ЗаписьЖурналаРегистрации("ЧтениеВСправочник",УровеньЖурналаРегистрации.Ошибка,Неопределено,Замер,"Не созданы настройки для операции произвольной загрузки по замеру ("+Замер+")");
		Возврат 0;
	КонецЕсли;
	

	
	//инициализация фильтров
	РеквизитыЗамера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Замер, "ФильтрТипСобытия,ФильтрСвойстваСобытия,ФильтрСвойстваСобытияКроме,ФильтрДлительность,НачалоПериода,КонецПериода,ТипЗамера,ДополнительнаяОбработка");
	НачалоПериода 	= РеквизитыЗамера.НачалоПериода;
	КонецПериода 	= РеквизитыЗамера.КонецПериода;
	РеквизитыЗамера.Вставить("ФильтрТипСобытия", РеквизитыЗамера.ФильтрТипСобытия.Получить());
	ЕстьФильтрТипСобытия = РеквизитыЗамера.ФильтрТипСобытия<>Неопределено И РеквизитыЗамера.ФильтрТипСобытия.Количество()>0;
	ЕстьФильтрСвойстваСобытия = ЗначениеЗаполнено(РеквизитыЗамера.ФильтрСвойстваСобытия);
	ЕстьФильтрДлительность = ЗначениеЗаполнено(РеквизитыЗамера.ФильтрДлительность); 
	
	НавигационнаяСсылка = "/Замер/("+Замер.UUID()+")";
	ФайлЗамера = Справочники.ФайлыЗамера.ПолучитьФайлПоПолномуИмени(Замер, НавигационнаяСсылка);
	
	//еще раз проверим прочитан полностью
	СостояниеЧтения = РегистрыСведений.СостояниеЧтения.ПолучитьСостояние(ФайлЗамера);
	Если СостояниеЧтения.ЧтениеЗавершено Тогда
		Возврат 0;
	КонецЕсли;		
	
	РазмерФайла = 0;
	
	ДатаНачалаЧтения = ТекущаяДата();
	
	//по факту - количество прочитанных данных
	ПрочитаноСтрок 			= СостояниеЧтения.ПрочитаноСтрок;
	ДатаПрочитанныхДанных 	= СостояниеЧтения.ДатаПрочитанныхДанных;
	
	// читаем в границе
	Если ДатаПрочитанныхДанных<НачалоПериода Тогда
		ДатаПрочитанныхДанных = НачалоПериода;
	КонецЕсли;
	
	//часть реквизитов будет одинакова для всего файла
	СтруктураЗаписи 			= ОбновлениеДанных.ПолучитьСтруктуруЗаписиСправочник();
	СтруктураЗаписи.Владелец 	= Замер;
	СтруктураЗаписи.Файл 		= ФайлЗамера;
	
	
	Если НЕ (ЗначениеЗаполнено(КонецПериода) И КонецПериода<ТекущаяДата()) Тогда
		КонецПериода = ТекущаяДата();
		КонецПериода = ОкруглитьДоМинуты(КонецПериода);
	КонецЕсли;
	
	
	
	СвойствоДлительность = СправочникиСерверПовтИсп.ПолучитьСвойство("duration");
	СвойствоСтатусOnLine = СправочникиСерверПовтИсп.ПолучитьСвойство("online");
	СвойствоContext = СправочникиСерверПовтИсп.ПолучитьСвойство("Context");
	СвойствоTimeCounter = СправочникиСерверПовтИсп.ПолучитьСвойство("time counter");
	СвойствоDecision = СправочникиСерверПовтИсп.ПолучитьСвойство("decision");
	
	TimeCounter = 0;
	
	СостояниеДо = ПолучитьСвойстваПоследнегоЗамера(Замер);
	ПредыдущееСостояниеOnLine = СостояниеДо.Получить(СвойствоСтатусOnLine);
	ПредыдущееСостояниеTimeCounter = СостояниеДо.Получить(СвойствоTimeCounter);
	
	
	ДатаСобытия = ТекущаяДата();
	
	ДанныеПодключения = ПолучитьДанныеПодключения();
	ЗаполнитьЗначенияСвойств(ДанныеПодключения,мНастройка);
	СтруктураОтвета = ТестНаСервере(ДанныеПодключения);
	
	СтруктураЗаписи.ДатаСобытия = ДатаСобытия;
	СтруктураЗаписи.КлючевыеСвойства.Очистить(); 	
	
	Если ПредыдущееСостояниеOnLine = Неопределено Тогда
		TimeCounter = 0;	
	ИначеЕсли ПредыдущееСостояниеOnLine.ЗначениеЧисло<>Число(СтруктураОтвета.Успешно) Тогда
		TimeCounter = 0;	
	Иначе
		Если ПредыдущееСостояниеTimeCounter=Неопределено Тогда
			TimeCounter = 0;
		Иначе
			TimeCounter = ПредыдущееСостояниеTimeCounter.ЗначениеЧисло+(ДатаСобытия - ПредыдущееСостояниеTimeCounter.ДатаСобытия);
		КонецЕсли;
	КонецЕсли;
		
			
	СтруктураЗаписи.КлючевыеСвойства.Вставить(СвойствоДлительность, СтруктураОтвета.Длительность);
	СтруктураЗаписи.КлючевыеСвойства.Вставить(СвойствоСтатусOnLine, СтруктураОтвета.Успешно);
	СтруктураЗаписи.КлючевыеСвойства.Вставить(СвойствоContext, СтруктураОтвета.ТекстОшибки);
	СтруктураЗаписи.КлючевыеСвойства.Вставить(СвойствоTimeCounter, TimeCounter);
	
	Если мНастройка.ИспользоватьФаззификацию=Истина Тогда
		
		Решение = ВыполнитьФаззификацию(TimeCounter,мНастройка.ТаблицаФаззификации);
		СтруктураЗаписи.КлючевыеСвойства.Вставить(СвойствоDecision, Решение);
		
	КонецЕсли;

	Справочники.СобытияЗамера.ЗаписатьСобытиеЧисло(СтруктураЗаписи);	
	
	// Обновление инфорации о количестве прочитанных строк
	РегистрыСведений.СостояниеЧтения.УстановитьСостояние(
		ФайлЗамера, 
		ДатаНачалаЧтения,
		ПрочитаноСтрок, 
		ДатаНачалаЧтения,
		РазмерФайла,
		ДатаПрочитанныхДанных);

	Возврат 0;
	
	
КонецФункции

Функция ОкруглитьДоМинуты(ПараметрДата,НаправлениеВверх=Истина)
	
	Секунды = Секунда(ПараметрДата);
	Если НаправлениеВверх=Истина Тогда
		ВремяОкругления = ПараметрДата-Секунды+60;
	Иначе
		ВремяОкругления = ПараметрДата-Секунды;
	КонецЕсли;
	
	Возврат ВремяОкругления;
	
КонецФункции

Функция ПолучитьСвойстваПоследнегоЗамера(Замер) Экспорт
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	СобытияЗамера.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВтПоследний
	|ИЗ
	|	Справочник.СобытияЗамера КАК СобытияЗамера
	|ГДЕ
	|	СобытияЗамера.Владелец = &Замер
	|
	|УПОРЯДОЧИТЬ ПО
	|	СобытияЗамера.ДатаСобытия УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СобытияЗамераКлючевыеСвойства.Свойство КАК Свойство,
	|	СобытияЗамераКлючевыеСвойства.Значение КАК Значение,
	|	СобытияЗамераКлючевыеСвойства.ЗначениеЧисло КАК ЗначениеЧисло,
	|	СобытияЗамераКлючевыеСвойства.Ссылка.ДатаСобытия КАК ДатаСобытия
	|ИЗ
	|	Справочник.СобытияЗамера.КлючевыеСвойства КАК СобытияЗамераКлючевыеСвойства
	|ГДЕ
	|	СобытияЗамераКлючевыеСвойства.Ссылка В
	|			(ВЫБРАТЬ
	|				ВтПоследний.Ссылка
	|			ИЗ
	|				ВтПоследний)";
	Запрос.УстановитьПараметр("Замер",Замер);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Соответствие = новый Соответствие;
	
	
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(Выборка.Свойство, новый Структура("Значение,ЗначениеЧисло,ДатаСобытия",Выборка.Значение,Выборка.ЗначениеЧисло,Выборка.ДатаСобытия));
	КонецЦикла;
	
	Возврат Соответствие;
КонецФункции

#КонецОбласти

#Область RemoteControl

Функция ВыполнитьФаззификацию(Значение,ТаблицаФаззификации)
	
	Решение = Неопределено;
	
	Для каждого стр из ТаблицаФаззификации Цикл
		Если стр.От<=Значение И (стр.До>Значение ИЛИ стр.До=0) Тогда
			Решение = стр.Терм;
			Прервать;
		КонецЕсли;
	КонецЦикла;
		
	Возврат Решение;
		
КонецФункции

Функция ПолучитьДанныеПодключения() Экспорт
	
	ДанныеПодключения = новый Структура;
	ДанныеПодключения.Вставить("АдресСервера",""); 
	ДанныеПодключения.Вставить("Порт",80);
	ДанныеПодключения.Вставить("Логин","");
	ДанныеПодключения.Вставить("Пароль","");
	ДанныеПодключения.Вставить("ИмяБазы","");
	ДанныеПодключения.Вставить("Таймаут",0);
	ДанныеПодключения.Вставить("SSL",Истина);
	ДанныеПодключения.Вставить("ИспользоватьАутентификациюОС",Ложь);
	
	Возврат ДанныеПодключения;
	
КонецФункции

Функция ТестНаСервере(мПараметры) Экспорт
	
	СтруктураРезультата = новый Структура("Успешно, Длительность, ТекстОшибки", Ложь, 0, "");
	
	Таймаут = мПараметры.Таймаут;
	Логин = мПараметры.Логин;
	Пароль = мПараметры.Пароль;
	ИспользоватьАутентификациюОС = мПараметры.ИспользоватьАутентификациюОС;
	URLОпубликованнойИнформационнойБазы = ?(мПараметры.SSL=Истина,"https://","http://")+мПараметры.АдресСервера+?(мПараметры.Порт=0,"",":"+XMLСтрока(мПараметры.Порт))+"/"+мПараметры.ИмяБазы+"/";
	
	ЗащищенноеСоединение = Неопределено;
	
	Если мПараметры.SSL Тогда
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL();
	Иначе
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;

	
	
	URLСервиса = СформироватьАдресWebСервиса(URLОпубликованнойИнформационнойБазы);
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Попытка 
		Если ПустаяСтрока(Логин) Тогда
			Определения = Новый WSОпределения(URLСервиса,,,,Таймаут);
		Иначе
			Если ПустаяСтрока(Пароль) Тогда
				Определения = Новый WSОпределения(URLСервиса, Логин,,,Таймаут,ЗащищенноеСоединение,ИспользоватьАутентификациюОС);
			Иначе
				Определения = Новый WSОпределения(URLСервиса, Логин, Пароль,,Таймаут,ЗащищенноеСоединение,ИспользоватьАутентификациюОС);
			КонецЕсли;
		КонецЕсли;
		
		Прокси = Новый WSПрокси(Определения, "http://www.1c.ru/SSL/RemoteControl_1_0_0_1", "RemoteControl", "RemoteControlSoap",,Таймаут,ЗащищенноеСоединение,,ИспользоватьАутентификациюОС);
		
		Если НЕ ПустаяСтрока(Логин) Тогда 
			Прокси.Пользователь = Логин;
			Если НЕ ПустаяСтрока(Пароль) Тогда
				Прокси.Пароль = Пароль;
			КонецЕсли;	
		КонецЕсли;
		
		ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
		Прокси.GetCurrentState();
		СтруктураРезультата.Успешно = Истина;
		
	Исключение
		СтруктураРезультата.ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;	
	
	СтруктураРезультата.Длительность = (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала)/1000;		


	Возврат СтруктураРезультата;
	
КонецФункции

Функция СформироватьАдресWebСервиса(URLбазы)
	
	Пока Прав(URLбазы, 1) = "/" Цикл
		
		URLбазы = Лев(URLбазы, СтрДлина(URLбазы) - 1);
		
	КонецЦикла;
	
	Возврат URLбазы + "/ws/RemoteControl?wsdl"; 
	
КонецФункции


#КонецОбласти
